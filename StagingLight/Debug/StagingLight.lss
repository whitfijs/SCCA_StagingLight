
StagingLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  0000037a  2**0
                  ALLOC
  3 .stab         000006c0  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000939  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	13 c1       	rjmp	.+550    	; 0x22c <__vector_1>
   6:	00 00       	nop
   8:	3e c1       	rjmp	.+636    	; 0x286 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c6 d0       	rcall	.+396    	; 0x228 <main>
  9c:	21 c1       	rjmp	.+578    	; 0x2e0 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_Z10startTimerj>:
	startTimer(countsToWait);
	sei();
}

void startTimer(uint16_t counts){
	TCCR1A = _BV(COM1B1);
  a0:	20 e2       	ldi	r18, 0x20	; 32
  a2:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = _BV(CS11)| _BV(WGM12);//Clock div by 8
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	20 93 81 00 	sts	0x0081, r18
	TCNT1 = 0x00;
  ac:	10 92 85 00 	sts	0x0085, r1
  b0:	10 92 84 00 	sts	0x0084, r1
	OCR1B = counts;
  b4:	90 93 8b 00 	sts	0x008B, r25
  b8:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B);
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	80 93 6f 00 	sts	0x006F, r24
}
  c2:	08 95       	ret

000000c4 <_Z10resetTimerj>:

void resetTimer(uint16_t counts){
	TCNT1 = 0x00;
  c4:	10 92 85 00 	sts	0x0085, r1
  c8:	10 92 84 00 	sts	0x0084, r1
	OCR1B = counts;
  cc:	90 93 8b 00 	sts	0x008B, r25
  d0:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B);
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	80 93 6f 00 	sts	0x006F, r24
}
  da:	08 95       	ret

000000dc <_Z13detectedPulsev>:

void detectedPulse(){
	/*we detected a pulse, reset the timer*/
	resetTimer(countsToWait);
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	90 91 01 01 	lds	r25, 0x0101
  e4:	ef df       	rcall	.-34     	; 0xc4 <_Z10resetTimerj>
  e6:	10 92 02 01 	sts	0x0102, r1
	car = false;
  ea:	1d 9b       	sbis	0x03, 5	; 3
#ifdef ACTIVE_HIGH
	if((LED_INPUT & _BV(LED_PIN))){/*If the LED is on*/
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <_Z13detectedPulsev+0x1c>
  ee:	e5 e2       	ldi	r30, 0x25	; 37
#endif
#ifdef ACTIVE_LOW
		if(!(LED_INPUT & _BV(LED_PIN))){/*If the LED is on*/
#endif
			/*Turn off the staging light*/
			LED_OFF();
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <__vector_12>:
		}
	}

	ISR(TIMER1_COMPB_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
		/*Executes when the timer is not reset = a car is present*/
		car = true;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 02 01 	sts	0x0102, r24
		/*Turn on the staging light*/
		LED_ON();
 122:	e5 e2       	ldi	r30, 0x25	; 37
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	80 83       	st	Z, r24
		resetTimer(countsToWait);
 12c:	80 91 00 01 	lds	r24, 0x0100
 130:	90 91 01 01 	lds	r25, 0x0101
 134:	c7 df       	rcall	.-114    	; 0xc4 <_Z10resetTimerj>
 136:	ff 91       	pop	r31
	}
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_Z15attachInterrupthPFvvEi>:

	static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
	// volatile static voidFuncPtr twiIntFunc;

	void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
		if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	48 f5       	brcc	.+82     	; 0x1ae <_Z15attachInterrupthPFvvEi+0x56>
			intFunc[interruptNum] = userFunc;
 15c:	e8 2f       	mov	r30, r24
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ed 5f       	subi	r30, 0xFD	; 253
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	71 83       	std	Z+1, r23	; 0x01
 16a:	60 83       	st	Z, r22
			// to the configuration bits in the hardware register, so we simply shift
			// the mode into place.

			// Enable the interrupt.

			switch (interruptNum) {
 16c:	88 23       	and	r24, r24
 16e:	19 f0       	breq	.+6      	; 0x176 <_Z15attachInterrupthPFvvEi+0x1e>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	e9 f4       	brne	.+58     	; 0x1ae <_Z15attachInterrupthPFvvEi+0x56>
 174:	0c c0       	rjmp	.+24     	; 0x18e <_Z15attachInterrupthPFvvEi+0x36>
				EIMSK |= (1 << INT7);
				break;
#else
			case 0:
#if defined(EICRA) && defined(ISC00) && defined(EIMSK)
				EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
 176:	e9 e6       	ldi	r30, 0x69	; 105
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8c 7f       	andi	r24, 0xFC	; 252
 17e:	84 2b       	or	r24, r20
 180:	80 83       	st	Z, r24
				EIMSK |= (1 << INT0);
 182:	ed e3       	ldi	r30, 0x3D	; 61
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret
#endif
				break;

			case 1:
#if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
				EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
 18e:	e9 e6       	ldi	r30, 0x69	; 105
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	9a 01       	movw	r18, r20
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	83 7f       	andi	r24, 0xF3	; 243
 1a0:	82 2b       	or	r24, r18
 1a2:	80 83       	st	Z, r24
				EIMSK |= (1 << INT1);
 1a4:	ed e3       	ldi	r30, 0x3D	; 61
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <_Z4initv>:

	return 0;
}


void init(){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	DDRD &= ~_BV(PIND2);//PD2 as input
 1b4:	ea e2       	ldi	r30, 0x2A	; 42
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	80 83       	st	Z, r24
	//PORTD |= _BV(PIND2);//Pull up enabled
	LED_DDR |= _BV(LED_PIN);//Output for light
 1be:	e4 e2       	ldi	r30, 0x24	; 36
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	80 83       	st	Z, r24
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0

	for(int i=0;i<10;i++){
		if(!(LED_INPUT & _BV(LED_PIN))){/*If the LED is off*/
 1cc:	c3 e2       	ldi	r28, 0x23	; 35
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
			/*Turn on the staging light*/
			LED_ON();
		}else{
			LED_OFF();
 1d0:	e5 e2       	ldi	r30, 0x25	; 37
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	a0 e1       	ldi	r26, 0x10	; 16
 1d6:	b7 e2       	ldi	r27, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1d8:	48 ec       	ldi	r20, 0xC8	; 200
 1da:	50 e0       	ldi	r21, 0x00	; 0
	DDRD &= ~_BV(PIND2);//PD2 as input
	//PORTD |= _BV(PIND2);//Pull up enabled
	LED_DDR |= _BV(LED_PIN);//Output for light

	for(int i=0;i<10;i++){
		if(!(LED_INPUT & _BV(LED_PIN))){/*If the LED is off*/
 1dc:	88 81       	ld	r24, Y
 1de:	85 fd       	sbrc	r24, 5
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <_Z4initv+0x3c>
			/*Turn on the staging light*/
			LED_ON();
 1e2:	80 81       	ld	r24, Z
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	80 83       	st	Z, r24
 1e8:	9d 01       	movw	r18, r26
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <_Z4initv+0x44>
		}else{
			LED_OFF();
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	80 83       	st	Z, r24
 1f2:	9d 01       	movw	r18, r26
 1f4:	ca 01       	movw	r24, r20
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_Z4initv+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	d1 f7       	brne	.-12     	; 0x1f4 <_Z4initv+0x44>
void init(){
	DDRD &= ~_BV(PIND2);//PD2 as input
	//PORTD |= _BV(PIND2);//Pull up enabled
	LED_DDR |= _BV(LED_PIN);//Output for light

	for(int i=0;i<10;i++){
 200:	6f 5f       	subi	r22, 0xFF	; 255
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	6a 30       	cpi	r22, 0x0A	; 10
 206:	71 05       	cpc	r23, r1
 208:	49 f7       	brne	.-46     	; 0x1dc <_Z4initv+0x2c>
			LED_OFF();
		}
		_delay_ms(1000);
	}

	attachInterrupt(EXTERNAL_INT_0, detectedPulse, FALLING);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	6e e6       	ldi	r22, 0x6E	; 110
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	42 e0       	ldi	r20, 0x02	; 2
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	a1 df       	rcall	.-190    	; 0x158 <_Z15attachInterrupthPFvvEi>
 216:	80 91 00 01 	lds	r24, 0x0100
	startTimer(countsToWait);
 21a:	90 91 01 01 	lds	r25, 0x0101
 21e:	40 df       	rcall	.-384    	; 0xa0 <_Z10startTimerj>
 220:	78 94       	sei
 222:	df 91       	pop	r29
	sei();
 224:	cf 91       	pop	r28
}
 226:	08 95       	ret

00000228 <main>:
volatile bool car = false;


int main(void){

	init();
 228:	c3 df       	rcall	.-122    	; 0x1b0 <_Z4initv>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0x2>

0000022c <__vector_1>:
			intFunc[EXTERNAL_INT_7]();
	}

#else

	ISR(INT0_vect) {
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
		if(intFunc[EXTERNAL_INT_0])
 24e:	80 91 03 01 	lds	r24, 0x0103
 252:	90 91 04 01 	lds	r25, 0x0104
 256:	89 2b       	or	r24, r25
 258:	29 f0       	breq	.+10     	; 0x264 <__vector_1+0x38>
			intFunc[EXTERNAL_INT_0]();
 25a:	e0 91 03 01 	lds	r30, 0x0103
 25e:	f0 91 04 01 	lds	r31, 0x0104
 262:	09 95       	icall
	}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_2>:

	ISR(INT1_vect) {
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
		if(intFunc[EXTERNAL_INT_1])
 2a8:	80 91 05 01 	lds	r24, 0x0105
 2ac:	90 91 06 01 	lds	r25, 0x0106
 2b0:	89 2b       	or	r24, r25
 2b2:	29 f0       	breq	.+10     	; 0x2be <__vector_2+0x38>
			intFunc[EXTERNAL_INT_1]();
 2b4:	e0 91 05 01 	lds	r30, 0x0105
 2b8:	f0 91 06 01 	lds	r31, 0x0106
 2bc:	09 95       	icall
	}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
