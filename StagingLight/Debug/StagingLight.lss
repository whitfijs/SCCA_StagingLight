
StagingLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000322  2**0
                  ALLOC
  3 .stab         000007d4  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e17  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__vector_1>
   6:	00 00       	nop
   8:	12 c1       	rjmp	.+548    	; 0x22e <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9a d0       	rcall	.+308    	; 0x1d0 <main>
  9c:	f5 c0       	rjmp	.+490    	; 0x288 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_Z10startTimerj>:
	startTimer(countsToWait);
	sei();
}

void startTimer(uint16_t counts){
	TCCR1A = _BV(COM1B1);
  a0:	20 e2       	ldi	r18, 0x20	; 32
  a2:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = _BV(CS11)| _BV(WGM12);//Clock div by 8
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	20 93 81 00 	sts	0x0081, r18
	TCNT1 = 0x00;
  ac:	10 92 85 00 	sts	0x0085, r1
  b0:	10 92 84 00 	sts	0x0084, r1
	OCR1B = counts;
  b4:	90 93 8b 00 	sts	0x008B, r25
  b8:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B);
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	80 93 6f 00 	sts	0x006F, r24
  c2:	08 95       	ret

000000c4 <_Z10resetTimerj>:
}

void resetTimer(uint16_t counts){
	TCNT1 = 0x00;
  c4:	10 92 85 00 	sts	0x0085, r1
  c8:	10 92 84 00 	sts	0x0084, r1
	OCR1B = counts;
  cc:	90 93 8b 00 	sts	0x008B, r25
  d0:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B);
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	80 93 6f 00 	sts	0x006F, r24
  da:	08 95       	ret

000000dc <_Z13detectedPulsev>:
}

void detectedPulse(){
	/*we detected a pulse, reset the timer*/
	resetTimer(countsToWait);
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	90 91 01 01 	lds	r25, 0x0101
  e4:	ef df       	rcall	.-34     	; 0xc4 <_Z10resetTimerj>
  e6:	10 92 06 01 	sts	0x0106, r1
	car = false;
  ea:	1d 99       	sbic	0x03, 5	; 3
#ifdef ACTIVE_HIGH
	if((LED_INPUT & _BV(LED_PIN))){/*If the LED is on*/
  ec:	2d 98       	cbi	0x05, 5	; 5
#endif
#ifdef ACTIVE_LOW
		if(!(LED_INPUT & _BV(LED_PIN))){/*If the LED is on*/
#endif
			/*Turn off the staging light*/
			LED_OFF();
  ee:	08 95       	ret

000000f0 <__vector_12>:
		}
	}

	ISR(TIMER1_COMPB_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
		/*Executes when the timer is not reset = a car is present*/
		car = true;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 06 01 	sts	0x0106, r24
		/*Turn on the staging light*/
		LED_ON();
 118:	2d 9a       	sbi	0x05, 5	; 5
		resetTimer(countsToWait);
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	d0 df       	rcall	.-96     	; 0xc4 <_Z10resetTimerj>
 124:	ff 91       	pop	r31
	}
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_Z15attachInterrupthPFvvEi>:

	static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
	// volatile static voidFuncPtr twiIntFunc;

	void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
		if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	00 f5       	brcc	.+64     	; 0x18a <_Z15attachInterrupthPFvvEi+0x44>
			intFunc[interruptNum] = userFunc;
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 5f       	subi	r30, 0xFE	; 254
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	71 83       	std	Z+1, r23	; 0x01
 158:	60 83       	st	Z, r22
			// to the configuration bits in the hardware register, so we simply shift
			// the mode into place.

			// Enable the interrupt.

			switch (interruptNum) {
 15a:	88 23       	and	r24, r24
 15c:	19 f0       	breq	.+6      	; 0x164 <_Z15attachInterrupthPFvvEi+0x1e>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	49 f0       	breq	.+18     	; 0x174 <_Z15attachInterrupthPFvvEi+0x2e>
 162:	08 95       	ret
				EIMSK |= (1 << INT7);
				break;
#else
			case 0:
#if defined(EICRA) && defined(ISC00) && defined(EIMSK)
				EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
 164:	e9 e6       	ldi	r30, 0x69	; 105
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8c 7f       	andi	r24, 0xFC	; 252
 16c:	48 2b       	or	r20, r24
 16e:	40 83       	st	Z, r20
				EIMSK |= (1 << INT0);
 170:	e8 9a       	sbi	0x1d, 0	; 29
				MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
				GIMSK |= (1 << INT0);
#else
#error attachInterrupt not finished for this CPU (case 0)
#endif
				break;
 172:	08 95       	ret

			case 1:
#if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
				EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
 174:	e9 e6       	ldi	r30, 0x69	; 105
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	83 7f       	andi	r24, 0xF3	; 243
 184:	48 2b       	or	r20, r24
 186:	40 83       	st	Z, r20
				EIMSK |= (1 << INT1);
 188:	e9 9a       	sbi	0x1d, 1	; 29
 18a:	08 95       	ret

0000018c <_Z4initv>:
	return 0;
}


void init(){
	DDRD &= ~_BV(PIND2);//PD2 as input
 18c:	52 98       	cbi	0x0a, 2	; 10
	//PORTD |= _BV(PIND2);//Pull up enabled
	LED_DDR |= _BV(LED_PIN);//Output for light
 18e:	25 9a       	sbi	0x04, 5	; 4
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	90 e0       	ldi	r25, 0x00	; 0

	for(int i=0;i<10;i++){
		if(!(LED_INPUT & _BV(LED_PIN))){/*If the LED is off*/
 194:	1d 99       	sbic	0x03, 5	; 3
 196:	02 c0       	rjmp	.+4      	; 0x19c <_Z4initv+0x10>
			/*Turn on the staging light*/
			LED_ON();
 198:	2d 9a       	sbi	0x05, 5	; 5
 19a:	01 c0       	rjmp	.+2      	; 0x19e <_Z4initv+0x12>
		}else{
			LED_OFF();
 19c:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	39 e6       	ldi	r19, 0x69	; 105
 1a2:	48 e1       	ldi	r20, 0x18	; 24
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	40 40       	sbci	r20, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z4initv+0x18>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z4initv+0x22>
 1ae:	00 00       	nop
 1b0:	01 97       	sbiw	r24, 0x01	; 1
void init(){
	DDRD &= ~_BV(PIND2);//PD2 as input
	//PORTD |= _BV(PIND2);//Pull up enabled
	LED_DDR |= _BV(LED_PIN);//Output for light

	for(int i=0;i<10;i++){
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	79 f7       	brne	.-34     	; 0x194 <_Z4initv+0x8>
			LED_OFF();
		}
		_delay_ms(1000);
	}

	attachInterrupt(EXTERNAL_INT_0, detectedPulse, FALLING);
 1b6:	42 e0       	ldi	r20, 0x02	; 2
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	6e e6       	ldi	r22, 0x6E	; 110
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	c2 df       	rcall	.-124    	; 0x146 <_Z15attachInterrupthPFvvEi>
 1c2:	80 91 00 01 	lds	r24, 0x0100
	startTimer(countsToWait);
 1c6:	90 91 01 01 	lds	r25, 0x0101
 1ca:	6a df       	rcall	.-300    	; 0xa0 <_Z10startTimerj>
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <main>:
volatile bool car = false;


int main(void){

	init();
 1d0:	dd df       	rcall	.-70     	; 0x18c <_Z4initv>
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x2>

000001d4 <__vector_1>:
			intFunc[EXTERNAL_INT_7]();
	}

#else

	ISR(INT0_vect) {
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
		if(intFunc[EXTERNAL_INT_0])
 1f6:	80 91 02 01 	lds	r24, 0x0102
 1fa:	90 91 03 01 	lds	r25, 0x0103
 1fe:	89 2b       	or	r24, r25
 200:	29 f0       	breq	.+10     	; 0x20c <__vector_1+0x38>
			intFunc[EXTERNAL_INT_0]();
 202:	e0 91 02 01 	lds	r30, 0x0102
 206:	f0 91 03 01 	lds	r31, 0x0103
 20a:	09 95       	icall
	}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_2>:

	ISR(INT1_vect) {
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
		if(intFunc[EXTERNAL_INT_1])
 250:	80 91 04 01 	lds	r24, 0x0104
 254:	90 91 05 01 	lds	r25, 0x0105
 258:	89 2b       	or	r24, r25
 25a:	29 f0       	breq	.+10     	; 0x266 <__vector_2+0x38>
			intFunc[EXTERNAL_INT_1]();
 25c:	e0 91 04 01 	lds	r30, 0x0104
 260:	f0 91 05 01 	lds	r31, 0x0105
 264:	09 95       	icall
	}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
